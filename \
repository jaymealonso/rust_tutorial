#![allow(unused)]

use rand::Rng;
use std::cmp::Ordering;
use std::env;
use std::fs::File;
use std::io::{self, repeat};
use std::io::{BufRead, BufReader, ErrorKind, Write};

fn main() {
    let args: Vec<String> = env::args().collect();
    dbg!(args);
    // ex10();
}

fn ex01() {
    println!("What's your name?");
    let mut name: String = String::new();
    let greeting: &str = "Nice to meet you";
    io::stdin().read_line(&mut name).expect("No Value");

    println!("Hello {}! {}", name.trim_end(), greeting);
}

fn ex02() {
    const ONE_MIL: u32 = 1_000_000;
    const PI: f32 = 3.141592;
    let age: &str = "42";
    let mut age: u32 = age.trim().parse().expect("Age not a number.");
    age += 1;
    println!("I'm {} and I want ${}", age, ONE_MIL);
}

fn ex03() {
    println!("Max u32:   {}", u32::MAX);
    println!("Max u64:   {}", u64::MAX);
    println!("Max usize: {}", usize::MAX);
    println!("Max u128:  {}", u128::MAX);
    println!("Max f32:   {}", f32::MAX);
    println!("Max f64:   {}", f64::MAX);
}

fn ex04() {
    let is_true: bool = true; //false
    let my_grade = 'A';

    let num_1: f32 = 1.111111111111111;
    println!("f32 : {}", num_1 + 0.111111111111111);
    let num_2: f64 = 1.111111111111111;
    println!("f64 : {}", num_2 + 0.111111111111111);
}

fn ex05() {
    let num_3: u32 = 5;
    let num_4: u32 = 4;
    println!("5 + 4 = {}", num_3 + num_4);
    println!("5 - 4 = {}", num_3 - num_4);
    println!("5 / 4 = {}", num_3 / num_4);
    println!("5 x 4 = {}", num_3 * num_4);
    println!("5 % 4 = {}", num_3 % num_4);
}

fn ex06() {
    _print_rnd();
    _print_rnd();
    _print_rnd();
    _print_rnd();
    _print_rnd();
    _print_rnd();
}

fn _print_rnd() {
    let random_num = rand::thread_rng().gen_range(1..101);
    println!("Random {}", random_num);
}

fn ex07() {
    let age: i32 = 8;
    if (age >= 1) && (age <= 18) {
        println!("Important birthday!")
    } else if (age == 21) || (age == 50) {
        println!("Important birthday XXXX!")
    } else if age >= 65 {
        println!("Important birthday! xxxx")
    } else {
        println!("Not important birthday!")
    }
}

fn ex08() {
    // let mut my_age = 42;
    let mut my_age = rand::thread_rng().gen_range(10..40);
    let can_vote: bool = my_age > 18;
    println!(
        "Idade de {}{} pode votar.",
        my_age,
        if !can_vote { " nÃ£o" } else { "" }
    )
}

fn ex09() {
    let mut age = rand::thread_rng().gen_range(8..80);
    print!("Age of {} is an ", age);
    match age {
        1..=18 => println!("Important birthday!"),
        21 | 50 => println!("Important birthday! XXXX"),
        65..=i32::MAX => println!("Important birthday! XXXX"),
        _ => println!("Not important birthday!"),
    }
}

fn ex10() {
    // let age = rand::thread_rng().gen_range(0..40);
    let age = 18;
    let voting_age = 18;
    match age.cmp(&voting_age) {
        Ordering::Less => println!("Age of {} can NOT vote!", age),
        Ordering::Greater | Ordering::Equal => println!("Age of {} can vote!", age),
    }
}

fn ex11() {}
